//===-- metal_type_traits -------------------------------------------------===//
// Copyright (c) 2017 Apple Inc. All rights reserved
//===----------------------------------------------------------------------===//

#ifndef __METAL_TYPE_TRAITS
#define __METAL_TYPE_TRAITS

#pragma METAL internals : enable
namespace metal
{
template <bool B, typename T = void>
struct enable_if
{
};
template <typename T>
struct enable_if<true, T>
{
  typedef T type;
};
template <bool B, typename T = void>
using enable_if_t = typename enable_if<B, T>::type;

template <bool B, typename T, typename F>
struct conditional
{
  typedef T type;
};
template <typename T, typename F>
struct conditional<false, T, F>
{
  typedef F type;
};
template <bool B, typename T, typename F>
using conditional_t = typename conditional<B, T, F>::type;

template <typename T>
struct remove_volatile
{
  typedef T type;
};
template <typename T>
struct remove_volatile<volatile T>
{
  typedef T type;
};
template <typename T>
using remove_volatile_t = typename remove_volatile<T>::type;

template <typename T>
struct remove_const
{
  typedef T type;
};
template <typename T>
struct remove_const<const T>
{
  typedef T type;
};
template <typename T>
using remove_const_t = typename remove_const<T>::type;

template <typename T>
struct remove_cv
{
  typedef remove_volatile_t<remove_const_t<T>> type;
};

template <typename T>
using remove_cv_t = typename remove_cv<T>::type;

template <typename T, T v>
struct integral_constant
{
  typedef T value_type;
  typedef integral_constant type;
  static constant constexpr T value = v;
};

template <bool B>
using bool_constant = integral_constant<bool, B>;
using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

template <typename T>
struct _is_integral_impl : bool_constant<__is_integral(T)>
{
};
template <typename T, int N>
struct _is_integral_impl<T __attribute__((ext_vector_type(N)))> : _is_integral_impl<T>
{
};
template <typename T, int N>
struct _is_integral_impl<T __attribute__((packed_vector_type(N)))> : _is_integral_impl<T>
{
};

template <typename T>
struct is_integral : _is_integral_impl<remove_cv_t<T>>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_integral_v = is_integral<T>::value;
#endif

template <typename T>
struct _is_floating_point_impl : bool_constant<__is_floating_point(T)>
{
};
template <typename T, int N>
struct _is_floating_point_impl<T __attribute__((ext_vector_type(N)))> : _is_floating_point_impl<T>
{
};
template <typename T, int N>
struct _is_floating_point_impl<T __attribute__((packed_vector_type(N)))> : _is_floating_point_impl<T>
{
};

template <typename T>
struct is_floating_point : _is_floating_point_impl<remove_cv_t<T>>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_floating_point_v = is_floating_point<T>::value;
#endif

template <typename T>
struct _is_scalar_impl : bool_constant<__is_scalar(T)>
{
};

template <typename T>
struct is_scalar : _is_scalar_impl<remove_cv_t<T>>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_scalar_v = is_scalar<T>::value;
#endif

template <typename T>
struct _is_vector_impl : false_type
{
};
template <typename T, int N>
struct _is_vector_impl<T __attribute__((ext_vector_type(N)))> : true_type
{
};
template <typename T, int N>
struct _is_vector_impl<T __attribute__((packed_vector_type(N)))> : true_type
{
};

template <typename T>
struct is_vector : _is_vector_impl<remove_cv_t<T>>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_vector_v = is_vector<T>::value;
#endif

template <typename T>
struct _is_arithmetic_impl : bool_constant<__is_arithmetic(T)>
{
};
template <typename T, int N>
struct _is_arithmetic_impl<T __attribute__((ext_vector_type(N)))> : _is_arithmetic_impl<T>
{
};
template <typename T, int N>
struct _is_arithmetic_impl<T __attribute__((packed_vector_type(N)))> : _is_arithmetic_impl<T>
{
};

template <typename T>
struct is_arithmetic : _is_arithmetic_impl<remove_cv_t<T>>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_arithmetic_v = is_arithmetic<T>::value;
#endif

template <typename U, typename V>
struct is_convertible : bool_constant<__is_convertible_to(U, V)>
{
};
#ifdef __cpp_variable_templates
template <typename U, typename V>
constexpr constant bool is_convertible_v = is_convertible<U, V>::value;
#endif

template <typename U, typename V>
struct is_same : bool_constant<__is_same(U, V)>
{
};
#ifdef __cpp_variable_templates
template <typename U, typename V>
constexpr constant bool is_same_v = is_same<U, V>::value;
#endif

template <typename T>
struct is_class : bool_constant<__is_class(T)>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_class_v = is_class<T>::value;
#endif

template <typename T>
struct is_signed : bool_constant<__is_signed(T)>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_signed_v = is_signed<T>::value;
#endif

template <typename T>
struct is_unsigned : bool_constant<__is_unsigned(T)>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_unsigned_v = is_unsigned<T>::value;
#endif

template <typename T>
struct is_enum : bool_constant<__is_enum(T)>
{
};
#ifdef __cpp_variable_templates
template <typename T>
constexpr constant bool is_enum_v = is_enum<T>::value;
#endif

template <typename T>
struct _vec_elements_impl : integral_constant<size_t, 0>
{
};
template <typename T, int N>
struct _vec_elements_impl<T __attribute__((ext_vector_type(N)))> : integral_constant<size_t, N>
{
};
template <typename T, int N>
struct _vec_elements_impl<T __attribute__((packed_vector_type(N)))> : integral_constant<size_t, N>
{
};
template <typename T>
struct vec_elements : _vec_elements_impl<remove_cv_t<T>>
{
};
#ifdef __cpp_variables_templates
template <typename T>
constexpr constant size_t vec_elements_v = vec_elements<T>::value;
#endif

template <typename T>
struct _make_scalar_impl
{
  typedef T type;
};
template <typename T, int N>
struct _make_scalar_impl<T __attribute__((ext_vector_type(N)))>
{
  typedef T type;
};
template <typename T, int N>
struct _make_scalar_impl<T __attribute__((packed_vector_type(N)))>
{
  typedef T type;
};
template <typename T>
struct make_scalar : _make_scalar_impl<remove_cv_t<T>>
{
};
template <typename T>
using make_scalar_t = typename make_scalar<T>::type;

template <typename T>
struct underlying_type
{
  typedef __underlying_type(T) type;
};
template <typename T>
using underlying_type_t = typename underlying_type<T>::type;

template <typename... T>
struct _disjunction : false_type
{
};
template <typename T>
struct _disjunction<T> : T
{
};
template <typename T, typename... U>
struct _disjunction<T, U...> : conditional_t<bool(T::value), T, _disjunction<U...>>
{
};
#ifdef __cpp_variable_templates
template <typename... T>
using disjunction = _disjunction<T...>;
template <typename... T>
constexpr constant bool disjunction_v = disjunction<T...>::value;
#endif

template <typename... T>
struct _conjunction : true_type
{
};
template <typename T>
struct _conjunction<T> : T
{
};
template <typename T, typename... U>
struct _conjunction<T, U...> : conditional_t<bool(T::value), _conjunction<U...>, T>
{
};
#ifdef __cpp_variable_templates
template <typename... T>
using conjunction = _conjunction<T...>;
template <typename... T>
constexpr constant bool conjunction_v = conjunction<T...>::value;
#endif
}
#pragma METAL internals : disable

#endif // __METAL_TYPE_TRAITS
