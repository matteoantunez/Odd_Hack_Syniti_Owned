#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
    customLayerData = {
        string[] appliedAPISchemas = ["StatementsAPI", "RiMaterialAPI", "RiLightAPI", "RiLightFilterAPI", "RiLightPortalAPI", "RiSplineAPI", "RiTextureAPI"]
        dictionary multipleApplyAPISchemas = {
        }
    }
)

class "StatementsAPI" (
    )
{
}

class RslShader "RslShader" (
    apiSchemas = ["NodeDefAPI"]
    )
{
    asset info:sloPath
}

class RisObject "RisObject" (
    apiSchemas = ["NodeDefAPI"]
    )
{
    asset info:argsPath
    asset info:filePath
}

class RisPattern "RisPattern" (
    apiSchemas = ["NodeDefAPI"]
    )
{
    asset info:argsPath
    asset info:filePath
}

class RisOslPattern "RisOslPattern" (
    apiSchemas = ["NodeDefAPI"]
    )
{
    asset info:argsPath
    asset info:filePath = @PxrOSL@ (
        hidden = true
    )
    asset info:oslPath
}

class RisBxdf "RisBxdf" (
    apiSchemas = ["NodeDefAPI"]
    )
{
    asset info:argsPath
    asset info:filePath
}

class RisIntegrator "RisIntegrator" (
    )
{
    asset argsPath
    asset filePath
}

class "RiMaterialAPI" (
    )
{
    token outputs:ri:displacement (
        displayGroup = "Outputs"
    )
    token outputs:ri:surface (
        displayGroup = "Outputs"
    )
    token outputs:ri:volume (
        displayGroup = "Outputs"
    )
}

class "RiLightAPI" (
    )
{
    float ri:intensityNearDist (
        displayGroup = "Refine"
        displayName = "Intensity Near Dist"
            )
    string ri:lightGroup (
        displayGroup = "Advanced"
        displayName = "Light Group"
            )
    int ri:sampling:fixedSampleCount (
        displayGroup = "Advanced"
        displayName = "Light Samples"
            )
    float ri:sampling:importanceMultiplier = 1 (
        displayGroup = "Advanced"
        displayName = "Importance Multiplier"
        
    )
    bool ri:shadow:thinShadow (
        displayGroup = "Advanced"
        displayName = "Thin Shadow"
            )
    bool ri:trace:lightPaths (
        displayGroup = "Advanced"
        displayName = "Trace Light Paths"
            )
}

class "RiLightFilterAPI" (
    )
{
    token ri:combineMode = "multiply" (
        allowedTokens = ["multiply", "max", "min", "screen"]
            )
    float ri:density = 1 (
        
    )
    float ri:diffuse = 1 (
            )
    float ri:exposure = 0 (
        
    )
    float ri:intensity = 0 (
        
    )
    bool ri:invert = 0 (
        
    )
    float ri:specular = 1 (
            )
}

class "RiLightPortalAPI" (
    )
{
    float ri:portal:intensity (
        displayGroup = "Basic"
            )
    color3f ri:portal:tint (
        displayGroup = "Basic"
        displayName = "Color Tint"
        
    )
}

class "RiSplineAPI" (
    )
{
}

class "RiTextureAPI" (
    )
{
    float ri:texture:gamma (
        
    )
    float ri:texture:saturation (
        
    )
}

class PxrEnvDayLight "PxrEnvDayLight" (
    apiSchemas = ["CollectionAPI:lightLink", "CollectionAPI:shadowLink"]
    
)
{
    uniform bool collection:lightLink:includeRoot = 1
    uniform bool collection:shadowLink:includeRoot = 1
    color3f color = (1, 1, 1) (
        
    )
    float colorTemperature = 6500 (
        displayName = "Color Temperature"
            )
    int day = 1 (
        displayGroup = "MsApprox"
        displayName = "Day"
            )
    float diffuse = 1 (
        displayName = "Diffuse Multiplier"
            )
    bool enableColorTemperature = 0 (
        displayName = "Enable Color Temperature"
        
    )
    float exposure = 0 (
            )
    rel filters (
        
    )
    float haziness = 2 (
        displayGroup = "MsApprox"
        displayName = "Haziness"
            )
    float hour = 14.633333 (
        displayGroup = "MsApprox"
        displayName = "Hour"
            )
    float intensity = 1 (
        
    )
    float latitude = 47.602 (
        displayGroup = "MsApprox"
        displayName = "Latitude"
            )
    float longitude = -122.332 (
        displayGroup = "MsApprox"
        displayName = "Longitude"
            )
    int month = 0 (
        displayGroup = "MsApprox"
        displayName = "Month"
            )
    bool normalize = 0 (
        displayName = "Normalize Power"
            )
    rel proxyPrim (
            )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
            )
    color3f skyTint = (1, 1, 1) (
        displayGroup = "MsApprox"
        displayName = "Sky Tint"
            )
    float specular = 1 (
        displayName = "Specular Multiplier"
            )
    vector3f sunDirection = (0, 0, 1) (
        displayGroup = "MsApprox"
        displayName = "Direction"
            )
    float sunSize = 1 (
        displayGroup = "MsApprox"
        displayName = "Sun Size"
            )
    color3f sunTint = (1, 1, 1) (
        displayGroup = "MsApprox"
        displayName = "Sun Tint"
            )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
            )
    uniform token[] xformOpOrder (
            )
    int year = 2015 (
        displayGroup = "MsApprox"
        displayName = "Year"
        
    )
    float zone = -8 (
        displayGroup = "MsApprox"
        displayName = "Time Zone"
            )
}

class PxrAovLight "PxrAovLight" (
    apiSchemas = ["CollectionAPI:lightLink", "CollectionAPI:shadowLink"]
    
)
{
    string aovName = "" (
        displayGroup = "Advanced"
        displayName = "AOV Name"
        
    )
    uniform bool collection:lightLink:includeRoot = 1
    uniform bool collection:shadowLink:includeRoot = 1
    color3f color = (1, 1, 1) (
        
    )
    float colorTemperature = 6500 (
        displayName = "Color Temperature"
            )
    float diffuse = 1 (
        displayName = "Diffuse Multiplier"
            )
    bool enableColorTemperature = 0 (
        displayName = "Enable Color Temperature"
        
    )
    float exposure = 0 (
            )
    rel filters (
        
    )
    bool inPrimaryHit = 1 (
        displayGroup = "Refine"
        displayName = "In Primvary Hit"
            )
    bool inReflection = 0 (
        displayGroup = "Refine"
        displayName = "In Reflection"
            )
    bool inRefraction = 0 (
        displayGroup = "Refine"
        displayName = "In Refraction"
            )
    float intensity = 1 (
        
    )
    bool invert = 0 (
        displayGroup = "Refine"
        displayName = "Invert"
        
    )
    bool normalize = 0 (
        displayName = "Normalize Power"
            )
    bool onVolumeBoundaries = 1 (
        displayGroup = "Refine"
        displayName = "On Volume Boundaries"
            )
    rel proxyPrim (
            )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
            )
    float specular = 1 (
        displayName = "Specular Multiplier"
            )
    bool useColor = 0 (
        displayGroup = "Refine"
        displayName = "Use Color"
            )
    bool useThroughput = 1 (
        displayGroup = "Refine"
        displayName = "Use Throughput"
            )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
            )
    uniform token[] xformOpOrder (
            )
}

class PxrIntMultLightFilter "PxrIntMultLightFilter" (
    apiSchemas = ["CollectionAPI:filterLink"]
    )
{
    uniform bool collection:filterLink:includeRoot = 1
    float color:saturation = 1 (
            )
    rel proxyPrim (
            )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
            )
    float ri:intensity = 1 (
            )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
            )
    uniform token[] xformOpOrder (
            )
}

class PxrBarnLightFilter "PxrBarnLightFilter" (
    apiSchemas = ["CollectionAPI:filterLink"]
    )
{
    float analytic:apex = 25 (
        
    )
    float analytic:density:exponent = 1 (
        
    )
    float analytic:density:farDistance = 0 (
            )
    float analytic:density:farValue = 1 (
        
    )
    float analytic:density:nearDistance = 0 (
            )
    float analytic:density:nearValue = 0 (
        
    )
    bool analytic:directional = 0 (
            )
    float analytic:shearX = 0 (
        
    )
    float analytic:shearY = 0 (
        
    )
    bool analytic:useLightDirection = 0 (
            )
    token barnMode = "physical" (
        allowedTokens = ["physical", "analytic"]
            )
    uniform bool collection:filterLink:includeRoot = 1
    float edgeScale:bottom = 1 (
        
    )
    float edgeScale:left = 1 (
        
    )
    float edgeScale:right = 1 (
        
    )
    float edgeScale:top = 1 (
        
    )
    float edgeThickness = 0 (
            )
    float height = 1 (
        
    )
    token preBarnEffect = "noLight" (
        allowedTokens = ["noEffect", "cone", "noLight"]
            )
    rel proxyPrim (
            )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
            )
    float radius = 0.5 (
        
    )
    float refine:bottom = 0 (
        
    )
    float refine:left = 0 (
        
    )
    float refine:right = 0 (
        
    )
    float refine:top = 0 (
        
    )
    float scale:height = 1 (
        
    )
    float scale:width = 1 (
        
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
            )
    float width = 1 (
        
    )
    uniform token[] xformOpOrder (
            )
}

class PxrCookieLightFilter "PxrCookieLightFilter" (
    apiSchemas = ["CollectionAPI:filterLink"]
    )
{
    float analytic:apex = 25 (
        
    )
    float analytic:blur:amount = 0 (
            )
    float analytic:blur:exponent = 1 (
        
    )
    float analytic:blur:farDistance = 10 (
        
    )
    float analytic:blur:farValue = 1 (
        
    )
    float analytic:blur:midpoint = 0.5 (
        
    )
    float analytic:blur:midValue = 1 (
        
    )
    float analytic:blur:nearDistance = 0 (
            )
    float analytic:blur:nearValue = 1 (
        
    )
    float analytic:blur:sMult = 0 (
        
    )
    float analytic:blur:tMult = 0 (
        
    )
    float analytic:density:exponent = 1 (
        
    )
    float analytic:density:farDistance = 10 (
            )
    float analytic:density:farValue = 1 (
        
    )
    float analytic:density:midpoint = 0.5 (
        
    )
    float analytic:density:midValue = 1 (
        
    )
    float analytic:density:nearDistance = 0 (
            )
    float analytic:density:nearValue = 1 (
        
    )
    bool analytic:directional = 0 (
            )
    float analytic:shearX = 0 (
        
    )
    float analytic:shearY = 0 (
        
    )
    bool analytic:useLightDirection = 0 (
            )
    uniform bool collection:filterLink:includeRoot = 1
    float color:contrast = 1 (
            )
    float color:midpoint = 0.18 (
        
    )
    float color:saturation = 1 (
            )
    color3f color:tint = (1, 1, 1) (
            )
    float color:whitepoint = 1 (
        
    )
    token cookieMode = "physical" (
        allowedTokens = ["physical", "analytic"]
            )
    float height = 1 (
        
    )
    rel proxyPrim (
            )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
            )
    color3f texture:fillColor = (1, 1, 1) (
            )
    bool texture:invertU = 0 (
            )
    bool texture:invertV = 0 (
            )
    asset texture:map (
        
    )
    float texture:offsetU = 0 (
        
    )
    float texture:offsetV = 0 (
        
    )
    bool texture:premultipliedAlpha = 1 (
            )
    float texture:scaleU = 1 (
        
    )
    float texture:scaleV = 1 (
        
    )
    token texture:wrapMode = "off" (
        allowedTokens = ["off", "repeat", "clamp"]
            )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
            )
    float width = 1 (
        
    )
    uniform token[] xformOpOrder (
            )
}

class PxrRampLightFilter "PxrRampLightFilter" (
    apiSchemas = ["CollectionAPI:filterLink"]
    )
{
    float beginDistance = 0 (
        
    )
    uniform bool collection:filterLink:includeRoot = 1
    int colorRamp = 4 (
        
    )
    color3f[] colorRamp:colors = [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)] (
        
    )
    token colorRamp:interpolation = "linear" (
        allowedTokens = ["linear", "catmull-rom", "bspline", "constant"]
        
    )
    float[] colorRamp:knots = [0, 0, 1, 1] (
        
    )
    float endDistance = 10 (
        
    )
    int falloff = 4 (
        
    )
    float[] falloff:floats = [0, 0, 1, 1] (
        
    )
    token falloff:interpolation = "linear" (
        allowedTokens = ["linear", "catmull-rom", "bspline", "constant"]
        
    )
    float[] falloff:knots = [0, 0, 1, 1] (
        
    )
    rel proxyPrim (
            )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
            )
    token rampMode = "distanceToLight" (
        allowedTokens = ["distanceToLight", "linear", "spherical", "radial"]
        
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
            )
    uniform token[] xformOpOrder (
            )
}

class PxrRodLightFilter "PxrRodLightFilter" (
    apiSchemas = ["CollectionAPI:filterLink"]
    )
{
    uniform bool collection:filterLink:includeRoot = 1
    float color:saturation = 1 (
            )
    int colorRamp = 4 (
        
    )
    color3f[] colorRamp:colors = [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)] (
        
    )
    token colorRamp:interpolation = "linear" (
        allowedTokens = ["linear", "catmull-rom", "bspline", "constant"]
        
    )
    float[] colorRamp:knots = [0, 0, 1, 1] (
        
    )
    float depth = 0 (
        
    )
    float edgeScale:back = 1 (
        
    )
    float edgeScale:bottom = 1 (
        
    )
    float edgeScale:front = 1 (
        
    )
    float edgeScale:left = 1 (
        
    )
    float edgeScale:right = 1 (
        
    )
    float edgeScale:top = 1 (
        
    )
    float edgeThickness = 0.25 (
            )
    int falloff = 6 (
        
    )
    float[] falloff:floats = [0, 0, 0.2, 0.8, 1, 1] (
        
    )
    token falloff:interpolation = "bspline" (
        allowedTokens = ["linear", "catmull-rom", "bspline", "constant"]
        
    )
    float[] falloff:knots = [0, 0, 0.3, 0.7, 1, 1] (
        
    )
    float height = 0 (
        
    )
    rel proxyPrim (
            )
    uniform token purpose = "default" (
        allowedTokens = ["default", "render", "proxy", "guide"]
            )
    float radius = 1 (
        
    )
    float refine:back = 0 (
        
    )
    float refine:bottom = 0 (
        
    )
    float refine:front = 0 (
        
    )
    float refine:left = 0 (
        
    )
    float refine:right = 0 (
        
    )
    float refine:top = 0 (
        
    )
    float scale:depth = 1 (
        
    )
    float scale:height = 1 (
        
    )
    float scale:width = 1 (
        
    )
    token visibility = "inherited" (
        allowedTokens = ["inherited", "invisible"]
            )
    float width = 0 (
        
    )
    uniform token[] xformOpOrder (
            )
}

